global
      log 127.0.0.1   local0
      log 127.0.0.1   local1 notice
      maxconn <%= node[:haproxy][:global_max_connections] %>
      nbproc      1
      #debug
      daemon
       tune.ssl.default-dh-param 2048
      user haproxy
      group haproxy
      
  defaults
      log             global
      mode        http
      option      httplog
      option          dontlognull
      retries         <%= node[:haproxy][:retries] %>
      option          redispatch
      option           forwardfor
      maxconn        <%= node[:haproxy][:default_max_connections] %>
      timeout client <%= node[:haproxy][:client_timeout] %>             # Client and server timeout must match the longest
      timeout server <%= node[:haproxy][:server_timeout] %>             # time we may wait for a response from the server.
      timeout queue  <%= node[:haproxy][:queue_timeout] %>              # Don't queue requests too long if saturated.
      timeout connect <%= node[:haproxy][:connect_timeout] %>           # There's no reason to change this one.
      timeout http-request <%= node[:haproxy][:http_request_timeout] %>	# A complete request may never take that long.
      <% if node[:haproxy][:httpclose] %>
      option          httpclose                                         # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
      <% end %>
      option          abortonclose                                      # enable early dropping of aborted requests from pending queue
      option          httpchk                                           # enable HTTP protocol to check on servers health
      <% if node[:haproxy][:enable_stats] -%>
      stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
      stats uri <%= node[:haproxy][:stats_url] %>
      <% end -%>
      log         global
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option http-server-close

  <% if node[:haproxy][:enable_stats] -%>
  listen stats 0.0.0.0:8000
    mode http
    stats enable
    stats realm HAProxy
    stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
    stats uri <%= node[:haproxy][:stats_url] %>
  <% end -%>

    
  frontend http-in
      bind :80
      timeout     client 86400000
      reqadd X-Forwarded-Proto:\ http
      <% elsif !node[:haproxy][:java_backends].empty? -%>
        default_backend java_servers
      <% end -%>

  frontend  https-in
  mode http
   bind :443 ssl crt /etc/ssl/certs/certificate.pem
   reqadd X-Forwarded-Proto:\ https

  <% elsif !node[:haproxy][:java_backends].empty? -%>
  default_backend java_servers_ssl
  <% end -%>


<% if !node[:haproxy][:java_backends].empty? -%>
backend java_servers_ssl
  mode        http
  balance <%= node[:haproxy][:balance] %>
  option forwardfor
  option httpchk
  <% node[:haproxy][:java_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_java_app_ssl] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>
